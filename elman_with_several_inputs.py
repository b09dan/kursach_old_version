# todo.Try this narx network: http://nullege.com/codes/search/pyneurgen.recurrent.NARXRecurrent
# todo.Official documentation for this: http://pyneurgen.sourceforge.net/api/recurrent_api.html#NARXRecurrent

import neurolab as nl
import numpy as np

# Create train samples
VSEGO = [19894.04, 19836.33, 22042.23, 12077.46, 17271.54, 22044.74, 22196.19, 23104.05, 22221.51, 22069.27, 24720.50, 22243.25, 23900.00, 24000.00, 24670.00, 15300.00, 20200.00, 23000.00, 21400.00, 23209.30, 22112.00, 24872.26, 24518.62, 22042.23, 26020.09, 24544.49, 25176.89, 17062.10, 21715.08, 23282.69, 23389.30, 21533.16, 22764.50, 24711.14, 23107.82, 23240.35, 24922.12, 23996.17, 26458.42, 16725.74, 19821.97, 22571.55, 23011.30, 21749.20, 21861.78, 24000.37, 20478.11, 21337.48, 22368.17, 19133.08, 20553.47, 9884.88, 13097.28, 14787.71, 13324.79, 12347.74, 13260.60, 13782.07, 13542.10, 14406.85]
usd = [30.32, 30.99, 30.86, 29.99, 29.32, 28.46, 28.08, 27.93, 27.99, 27.91, 28.75, 30.57, 31.39, 30.82, 31.49, 31.24, 29.89, 29.33, 29.49, 30.80, 32.88, 32.53, 31.96, 31.52, 31.12, 31.40, 30.74, 30.23, 30.16, 30.80, 31.35, 31.31, 32.31, 32.74, 33.02, 32.60, 32.10, 32.69, 32.88, 33.78, 35.24, 36.20, 35.67, 34.83, 34.45, 34.64, 36.10, 37.90, 40.80, 46.22, 55.77, 65.15, 64.52, 60.36, 53.22, 50.47, 54.45, 57.18, 65.42, 66.78]
euro = [42.09, 42.33, 40.78, 40.22, 40.01, 39.80, 40.55, 40.02, 40.26, 39.91, 41.22, 42.20, 42.92, 41.87, 41.49, 40.27, 39.48, 38.79, 38.81, 39.44, 41.21, 40.02, 39.57, 40.46, 40.34, 40.29, 40.31, 40.27, 40.38, 39.94, 40.78, 40.54, 42.59, 42.81, 43.97, 43.48, 43.75, 44.15, 45.03, 46.06, 48.11, 50.03, 49.24, 47.84, 46.86, 46.96, 48.10, 48.98, 51.76, 57.68, 68.76, 75.34, 73.29, 65.41, 57.36, 56.31, 61.10, 62.99, 72.84, 75.04]
GDP_bln = [13249.28, 13249.28, 13249.28, 11954.23, 11954.23, 11954.23, 13376.38, 13376.38, 13376.38, 14732.93, 14732.93, 14732.93, 15903.69, 15903.69, 15903.69, 13677.38, 13677.38, 13677.38, 14971.12, 14971.12, 14971.12, 16280.67, 16280.67, 16280.67, 17247.33, 17247.33, 17247.33, 14577.33, 14577.33, 14577.33, 15827.81, 15827.81, 15827.81, 17450.58, 17450.58, 17450.58, 18334.40, 18334.40, 18334.40, 17138.87, 17138.87, 17138.87, 18884.58, 18884.58, 18884.58, 20406.95, 20406.95, 20406.95, 21514.67, 21514.67, 21514.67, 18209.69, 18209.69, 18209.69, 19284.15, 19284.15, 19284.15, 21294.36, 21294.36, 21294.36]
inflation = [0.50, 0.81, 1.08, 2.37, 0.78, 0.62, 0.43, 0.48, 0.23, -0.01, -0.24, -0.04, 0.48, 0.42, 0.44, 0.50, 0.37, 0.58, 0.31, 0.52, 0.89, 1.23, 0.10, 0.55, 0.46, 0.34, 0.54, 0.97, 0.56, 0.34, 0.51, 0.66, 0.42, 0.82, 0.14, 0.21, 0.57, 0.56, 0.51, 0.59, 0.70, 1.02, 0.90, 0.90, 0.62, 0.49, 0.24, 0.65, 0.82, 1.28, 2.62, 3.85, 2.22, 1.21, 0.46, 0.35, 0.19, 0.80, 0.35, 0.57]
CPI = [100.67, 101.02, 101.32, 101.77, 100.79, 100.72, 100.41, 100.4, 100.07, 99.76, 99.54, 99.98, 100.61, 100.54, 100.49, 100.6, 100.51, 100.64, 100.32, 100.47, 100.92, 100.72, 99.93, 100.41, 100.6, 100.45, 100.58, 101.09, 100.62, 100.4, 100.53, 100.6, 100.35, 100.04, 99.88, 100.25, 100.8, 100.69, 100.48, 100.64, 100.79, 101.21, 100.97, 100.96, 100.53, 100.17, 100.1, 100.78, 100.91, 101.32, 102.75, 104.43, 102.68, 101.5, 100.6, 100.3, 99.94, 100.09, 100.03, 100.76]

usd_sample = [63.25, 65.02956316, 69.70484783, 77.934425, 77.32849474]
euro_sample = [71.04, 69.87650526, 75.78508696, 84.7717375, 85.95398421]
GDP_bln_sample = [22016.11, 22016.11, 22016.11, 18027.59, 18027.59]
inflation_sample = [0.74, 0.75, 0.77, 0.96, 0.63]
CPI_sample = [101.02, 100.94, 100.81, 100.94, 100.73]


VSEGO = np.asarray(VSEGO)
usd = np.asarray(usd)
euro = np.asarray(euro)
GDP_bln = np.asarray(GDP_bln)
inflation = np.asarray(inflation)
CPI = np.asarray(CPI)

usd_sample = np.asarray(usd_sample)
euro_sample = np.asarray(euro_sample)
GDP_bln_sample = np.asarray(GDP_bln_sample)
inflation_sample = np.asarray(inflation_sample)
CPI_sample = np.asarray(CPI_sample)

size = len(VSEGO)

inp = np.vstack((usd, euro, GDP_bln, inflation, CPI)).T
tar = VSEGO.reshape(size, 1)
smp = np.vstack((usd_sample, euro_sample, GDP_bln_sample, inflation_sample, CPI_sample)).T

# Create network with 2 layers and random initialized
net = nl.net.newelm(
        [[min(inp[:, 0]), max(inp[:, 0])],
         [min(inp[:, 1]), max(inp[:, 1])],
         [min(inp[:, 2]), max(inp[:, 2])],
         [min(inp[:, 3]), max(inp[:, 3])],
         [min(inp[:, 4]), max(inp[:, 4])],
         ],
        [16, 1],
        [nl.trans.TanSig(), nl.trans.PureLin()]
                )
# Set initialized functions and init
net.layers[0].initf = nl.init.InitRand([-0.1, 0.1], 'wb')
net.layers[1].initf = nl.init.InitRand([-0.1, 0.1], 'wb')
net.init()
# Train network
error = net.train(inp, tar, epochs=1500, show=100, goal=0.02)

# Simulate network
out = net.sim(smp)
print(out)